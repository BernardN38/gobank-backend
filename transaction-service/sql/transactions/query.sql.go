// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package transactions

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions(
    amount, from_account, to_account, created_at
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING id, amount, to_account, from_account, created_at
`

type CreateTransactionParams struct {
	Amount      int64
	FromAccount uuid.UUID
	ToAccount   uuid.UUID
	CreatedAt   time.Time
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.Amount,
		arg.FromAccount,
		arg.ToAccount,
		arg.CreatedAt,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.ToAccount,
		&i.FromAccount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT id, amount, to_account, from_account, created_at FROM transactions
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.ToAccount,
			&i.FromAccount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTransactionsByAccount = `-- name: GetAllTransactionsByAccount :many
SELECT id, amount, to_account, from_account, created_at FROM transactions
WHERE to_account = $1 OR from_account = $1
`

func (q *Queries) GetAllTransactionsByAccount(ctx context.Context, toAccount uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactionsByAccount, toAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.ToAccount,
			&i.FromAccount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeposits = `-- name: GetDeposits :one
SELECT COALESCE(SUM(amount),0)
FROM transactions WHERE to_account = $1
`

func (q *Queries) GetDeposits(ctx context.Context, toAccount uuid.UUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getDeposits, toAccount)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT id, amount, to_account, from_account, created_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactionById(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.ToAccount,
		&i.FromAccount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionsByFromAccount = `-- name: GetTransactionsByFromAccount :many
SELECT id, amount, to_account, from_account, created_at FROM transactions
WHERE from_account = $1
`

func (q *Queries) GetTransactionsByFromAccount(ctx context.Context, fromAccount uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByFromAccount, fromAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.ToAccount,
			&i.FromAccount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByToAccount = `-- name: GetTransactionsByToAccount :many
SELECT id, amount, to_account, from_account, created_at FROM transactions
WHERE to_account = $1
`

func (q *Queries) GetTransactionsByToAccount(ctx context.Context, toAccount uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByToAccount, toAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.ToAccount,
			&i.FromAccount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWithdrawals = `-- name: GetWithdrawals :one
SELECT COALESCE(SUM(amount),0)
FROM transactions WHERE from_account = $1
`

func (q *Queries) GetWithdrawals(ctx context.Context, fromAccount uuid.UUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getWithdrawals, fromAccount)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}
